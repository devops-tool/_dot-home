#!/usr/bin/env bash
set -e

warn() { echo >&2 "$(basename $0):" "$@"; }

check_submodules() {
    count=$(git submodule status --recursive | sed -n -e '/^[^ ]/p' | wc -l)
    [ $count -eq 0 ] || {
        warn "$count Git submodules are not up to date"
        warn 'Run `git submodule update --init`?'
    }
}

build_3tools() {
    local prefix="$1"
    local archive_dir="$base_dir/.archive"
    local bash_ver=bash-3.2.57
    local bash_tarball=$bash_ver.tar.gz
    local src_dir="$prefix/src/$bash_ver"

    mkdir -p "$archive_dir" "$prefix/src"

    [ -s "$archive_dir/$bash_tarball" ] \
        || wget -O "$archive_dir/$bash_tarball" \
            "https://ftp.gnu.org/gnu/bash/$bash_tarball"

    [ -s "$src_dir/configure" ] \
        || tar -x -C "$prefix/src" -f "$archive_dir/$bash_tarball"

    [ -x "$prefix/bin/bash" ] || (
           cd "$src_dir" \
        && ./configure --prefix="$prefix" \
        && make -j 8 \
        && make install MAKEINFO=true
    )
}

############################################################
# Main

# We use `sort` and various other localized commands in the tests;
# make sure that we always have a consistent sorting order regardless
# of the user's locale.
#
export LC_COLLATE=C

# Environment variables passed on to everything in build/test framework.
#
export base_dir="$(cd $(dirname "$0") && pwd -P)"
export build_dir="$base_dir/.build"
export build_t_dir="$build_dir/t"       # Data generated by tests

# Clear any data generated by previous test runs.
#
rm    -rf "$build_t_dir"
mkdir -p  "$build_t_dir"

cd "$base_dir"
check_submodules
export EXPECTED_BASH_VERSINFO=4
if [ _"$1" = _-3 ]; then        # Test with Bash 3 and other old tools
    shift
    build_3tools "$build_dir/local"
    PATH=$build_dir/local/bin:$PATH
    EXPECTED_BASH_VERSINFO=3
fi
bats/bin/bats "${@:-t/}"
